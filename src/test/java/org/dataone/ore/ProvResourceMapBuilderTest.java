package org.dataone.ore;

import static org.junit.Assert.*;

import java.io.FileWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.dataone.service.types.v1.Identifier;
import org.dspace.foresite.ResourceMap;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

public class ProvResourceMapBuilderTest {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
	}

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void testCreateResourceMapWithPROV() {
		System.out.println("***************  testCreateResourceMapWithPROV  ******************");
		
		try {
			//Create the derived resources
			//A resource map
			Identifier resourceMapId = new Identifier();
			resourceMapId.setValue("doi://1234/AA/map.1.1");
			//Metadata
			Identifier metadataId = new Identifier();
			metadataId.setValue("doi://1234/AA/meta.1.1");
			//One derived data file
			Identifier dataId = new Identifier();
			dataId.setValue("doi://1234/AA/data.1.1");
			//Two activity files (e.g. scripts)
			Identifier drawActivityId = new Identifier();
			drawActivityId.setValue("doi://1234/AA/drawActivity.1.1");
			Identifier composeActivityId = new Identifier();
			composeActivityId.setValue("doi://1234/AA/composeActivity.1.1");
			//A graph/chart/visualization file
			Identifier imgId = new Identifier();
			imgId.setValue("doi://1234/AA/img.1.1");
			
			//Map the files and create the resource map
			List<Identifier> idsToMap = new ArrayList<Identifier>();
			idsToMap.add(dataId);
			idsToMap.add(drawActivityId);
			idsToMap.add(composeActivityId);
			idsToMap.add(imgId);
			Map<Identifier, List<Identifier>> idMap = new HashMap<Identifier, List<Identifier>>();
			idMap.put(metadataId, idsToMap);			
			ResourceMapFactory rmf = ResourceMapFactory.getInstance();
			ProvResourceMapBuilder provBuilder = ProvResourceMapBuilder.getInstance();
			ResourceMap resourceMap = rmf.createResourceMap(resourceMapId, idMap);
			assertNotNull(resourceMap);
			
			//Create the primary resources
			// Two data files
			Identifier primaryDataId = new Identifier();
			primaryDataId.setValue("doi://1234/AA/primaryData.1.1");
			Identifier primaryDataId2 = new Identifier();
			primaryDataId2.setValue("doi://1234/AA/primaryData.2.1"); 
			
			//Create a list of ids of the primary data resources
			List<Identifier> primaryDataIds = new ArrayList<Identifier>();
			primaryDataIds.add(primaryDataId);
			primaryDataIds.add(primaryDataId2);
			
			//---- wasDerivedFrom ----
			//Map these ids to the id of the data they are derived from
			Map<Identifier, List<Identifier>> wasDerivedFromMap = new HashMap<Identifier, List<Identifier>>();
			wasDerivedFromMap.put(dataId, primaryDataIds);
			provBuilder.addWasDerivedFrom(resourceMap, wasDerivedFromMap);
			
			//---- wasGeneratedBy ----
			//Map entity ids to the activities they were generated by
			Map<Identifier, List<Identifier>> wasGeneratedByMap = new HashMap<Identifier, List<Identifier>>();
			List<Identifier> activityIds = new ArrayList<Identifier>();
			activityIds.add(drawActivityId);
			wasGeneratedByMap.put(imgId, activityIds);
			//rmf.addWasGeneratedBy(resourceMap, wasGeneratedByMap);
			provBuilder.addWasGeneratedBy(resourceMap, imgId, drawActivityId);
			provBuilder.addWasGeneratedBy(resourceMap, dataId, composeActivityId);
			
			//---- wasInformedBy ----
			provBuilder.addWasInformedBy(resourceMap, drawActivityId, composeActivityId);
			
			//---- used ----
			Map<Identifier, List<Identifier>> usedMap = new HashMap<Identifier, List<Identifier>>();
			usedMap.put(composeActivityId, primaryDataIds);
			provBuilder.addUsed(resourceMap, drawActivityId, dataId);
			provBuilder.addUsed(resourceMap, usedMap);
			
			//Create an XML document with the serialized RDF
			FileWriter fw = new FileWriter("target/testCreateResourceMapWithPROV.xml");
			String rdfXml = ResourceMapFactory.getInstance().serializeResourceMap(resourceMap);
			assertNotNull(rdfXml);
			//Print it
			fw.write(rdfXml);
			fw.flush();
			fw.close();
			System.out.println(rdfXml);
			
			// now put it back in an object
			Map<Identifier, Map<Identifier, List<Identifier>>> retPackageMap = ResourceMapFactory.getInstance().parseResourceMap(rdfXml);
            Identifier retPackageId = retPackageMap.keySet().iterator().next();   
            
            // Package Identifiers should match
            assertEquals(resourceMapId.getValue(), retPackageId.getValue());
            System.out.println("PACKAGEID IS: " + retPackageId.getValue());

            // Get the Map of metadata/data identifiers
            Map<Identifier, List<Identifier>> retIdMap = retPackageMap.get(retPackageId);
            			
			// same size
			assertEquals(idMap.keySet().size(), retIdMap.keySet().size());
			for (Identifier key : idMap.keySet()) {
			    System.out.println("  ORIGINAL: " + key.getValue());
			    List<Identifier> contained = idMap.get(key);
			    for (Identifier cKey : contained) {
		             System.out.println("    CONTAINS: " + cKey.getValue());
			    }
			}
            for (Identifier key : retIdMap.keySet()) {
                System.out.println("  RETURNED: " + key.getValue());
                List<Identifier> contained = idMap.get(key);
                for (Identifier cKey : contained) {
                     System.out.println("    CONTAINS: " + cKey.getValue());
                }
            }

			// same value
			assertEquals(idMap.keySet().iterator().next().getValue(), retIdMap.keySet().iterator().next().getValue());
			
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
			fail();
		}
	}

}
